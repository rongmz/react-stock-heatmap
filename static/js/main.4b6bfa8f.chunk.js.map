{"version":3,"sources":["../../src/utils.js","../../src/index.js","App.js","index.js"],"names":["extractBidPrices","data","set","Set","d","marketDepth","buys","b","sells","acc","Array","extractBidVolumes","extractMaxVolume","vols","a","extractMaxTradedVolume","zoomTimeFormat","seconds","decimal","hrs","mins","d3","Object","StockHeatmap","canvasRef","React","drawingContext","windowedData","windowLength","windowPosition","autoScroll","defaults","borderPadding","bidAskWidth","axisYWidth","axisXHeight","buyColor","textOnBuyColor","sellColor","textOnSellColor","textOnBackground","textHighlightOnBackground","tradeColor","axisTickSize","axisColor","xAxisTextPadding","yAxisTextPadding","bidAskGraphPaddingLeft","bidAskTransitionDuration","volumeCircleMaxRadius","runningRatioSeconds","hmWidth","hmHeight","clearColor","isMouseDown","mouseDownX","attachMouseListeners","detachMouseListeners","eventMouseDown","e","eventMouseMove","dragLength","moveDataPointsCount","Math","eventMouseUp","eventZoomWheel","l2","l","eventKeyDown","console","xScale","bidAskScale","yScale","yDomainValues","bidAskAnimTimer","bidAskBarAnimConfig","updateHeatmapDimensions","width","height","updateHeatmap","drawBuy2SellRatio","x","y","w","h","textHeight","sellT20RunningSum","buyT20RunningSum","i","vol","s","newBSTPFactor","drawXAxis","assumedTextWidth","bandInterval","parseInt","maxVolumeInWindowData","drawYAxisAndBidAskGraph","maxTextWidth","tw","drawBidAskGraph","elapsed","t","maxBidAskVol","drawBars","arr","color","textColor","v","drawMainGraph","maxTradedVolume","ts","buy","sell","r","clearCanvas","setData","addData","updateWindowedData","moveDataWindow","position","setZoomLevel","shouldComponentUpdate","shouldUpdate","this","props","nextProps","componentDidMount","current","getContext","componentDidUpdate","componentWillUnmount","render","ref","tabIndex","style","display","cursor","Component","useState","loading","setLoading","progressRef","useRef","heatmapRef","windowDim","setWindowDim","useEffect","fetch","then","body","headers","reader","getReader","contentLength","get","receivedLength","chunks","read","done","value","push","length","innerHTML","toFixed","chunksAll","Uint8Array","chunk","result","TextDecoder","decode","split","filter","trim","map","JSON","parse","updateFn","window","innerWidth","innerHeight","addEventListener","removeEventListener","Fragment","className","onClick","prompt","ReactDOM","App","document","getElementById"],"mappings":"gYAKO,IAAMA,EAAmB,SAACC,GAC/B,IAAMC,EAAM,IAAIC,IAAIF,EAAA,KAAS,SAAAG,GAC3B,IAAMC,EAAcD,EAApB,YACA,KAAiB,CACf,IAAIE,EAAOD,EAAA,UAAqB,SAAAE,GAAC,OAAKA,EAAL,QAC7BC,EAAQH,EAAA,WAAsB,SAAAE,GAAC,OAAKA,EAAL,QACnC,OAAOD,WAAmB,EAAED,EAA5B,kBAEF,YAPkB,QAQV,qBAAcI,SAAd,KARV,KASA,OAAOC,WAAP,IAQWC,EAAoB,SAACV,GAChC,IAAMI,EAAcJ,EAApB,YACA,KAAiB,CACf,IAAIK,EAAOD,EAAA,UAAqB,SAAAE,GAAC,OAAKA,EAAL,OAC7BC,EAAQH,EAAA,WAAsB,SAAAE,GAAC,OAAKA,EAAL,OACnC,OAAOD,SAAP,GAEG,MAAO,IAQDM,EAAmB,SAACX,GAC/B,IAAMY,EAAOF,EAAA,SAA6B,qBAAUG,EAAV,KAC1C,OAAID,SAAJ,EAA4BA,EAAKA,SAAjC,GACY,GAQDE,EAAyB,SAACd,GACrC,IAAIY,EAAOZ,EAAA,KAAS,SAAAG,GAClB,OAAIA,EAAJ,aAA2BA,cAA3B,cACY,KAFH,MAGH,qBAAUU,EAAV,KACR,OAAID,SAAJ,EAA4BA,EAAKA,SAAjC,GACY,GAODG,EAAiB,SAACC,EAASC,GAEtC,GADA,IAAaA,KACVD,EAAH,GAAiB,CACf,GAAGA,EAAH,KAAmB,CACjB,IAAIE,EAAMF,EAAV,KACA,OAAUE,UAAV,YAAsCA,QAAtC,IAGA,IAAIC,EAAOH,EAAX,GACA,OAAUG,UAAV,cAAyCA,QAAzC,IAGC,OAAUH,EAAV,WAA2BA,QAA3B,KC/DMI,EAAKC,cAChBA,cACEA,qBADFA,OADgBA,KAAX,G,EAccC,Y,gJAGnBC,UAAYC,gB,EAEZC,eAAiB,K,EAEjBzB,KAAO,G,EACP0B,aAAe,G,EACfC,aAAe,G,EACfC,eAAiB,E,EACjBC,YAAa,E,EAGbC,SAAW,CACTC,cAAe,CAAC,EAAG,EAAG,EADb,GAETC,YAFS,IAGTC,WAHS,GAITC,YAJS,GAKTC,SALS,UAMTC,eANS,UAOTC,UAPS,UAQTC,gBARS,UASTC,iBATS,UAUTC,0BAVS,UAWTC,WAXS,UAYTC,aAZS,EAaTC,UAbS,UAcTC,iBAdS,EAeTC,iBAfS,EAgBTC,uBAhBS,GAiBTC,yBAjBS,IAkBTC,sBAlBS,GAmBTC,oBAnBS,EAoBTC,QAAS,kBAAO,cAAmB,yBAAnB,GAAoD,yBAApD,GAAqF,WAArF,YAAiH,WAAxH,YACTC,SAAU,kBAAO,eAAoB,yBAApB,GAAqD,yBAArD,GAAsF,WAA7F,aACVC,WAAY,W,EAqCdC,aAAc,E,EACdC,WAAa,E,EAKbC,qBAAuB,WACrB,OAAI,sBACF,iDAAqD,EAArD,gBACA,iDAAqD,EAArD,gBACA,+CAAmD,EAAnD,cACA,6CAAiD,EAAjD,gBACA,+CAAmD,EAAnD,gB,EAOJC,qBAAuB,WACrB,OAAI,sBACF,oDAAwD,EAAxD,gBACA,oDAAwD,EAAxD,gBACA,kDAAsD,EAAtD,cACA,gDAAoD,EAApD,gBACA,kDAAsD,EAAtD,gB,EAQJC,eAAiB,YAEf,iBACA,aAAkBC,EAAlB,G,EAOFC,eAAiB,YACf,GAAI,EAAJ,YAAsB,CAEpB,IAAMC,EAAaF,IAAM,EAAzB,WACMG,EAAsBC,WAAWA,YAAuB,SAA9D,aACID,EAAJ,IAA6B,aAAkBH,EAAlB,GAG7B,iBAAoB,iBAAsBG,GAAuBD,QAAjE,M,EAYJG,aAAe,YAEb,iBACA,gB,EAOFC,eAAiB,YACf,IACWC,EAAPC,EAAJ,EACA,OAFkBR,qBAAlB,YAGE,cACEQ,EAAIJ,SAAS,eAATA,EAAJI,GACA,MACF,eACEA,EAAIJ,SAAS,eAATA,EAAgC,cAApCI,GAGJD,EAAK,eAALA,EACA,iBACA,iBAAoB,iBAApB,I,EAQFE,aAAe,YAGb,OAFAT,mBACAU,wBAAyBV,EAAzBU,YAAwCV,EAAxCU,IAA+CV,EAA/CU,SACQV,EAAR,KACE,gBACE,iBAAoB,kBAAuBA,aAA3C,IACA,MACF,iBACE,iBAAoB,kBAAuBA,aAA3C,M,EAUNW,OAAS,K,EAETC,YAAc,K,EAEdC,OAAS,K,EAETC,cAAgB,K,EAEhBC,gBAAkB,K,EAElBC,oBAAsB,G,EAOtBC,wBAA0B,WAAM,MAEJ,EAFI,MAEtBC,EAFsB,QAEfC,EAFe,SAG1BD,KAAaC,EAAbD,GAA2B,sBAA/B,IAEE,SAAcxD,EAAA,kBACL,CAAC,EAAG,WADC,mBAEJ,oBAAsB,SAAAjB,GAAC,OAAIA,EAAJ,OAEjC,gBAAqBJ,EAAiB,EAAjB,oBAAyC,qBAAUc,EAAV,KAC9D,SAAcO,oBACL,CAAC,WAAD,WADKA,WAEJ,EAFV,eAIA,cAAmBA,sBACV,CAAC,EAAG,WADMA,qBAET,CAAC,EAAGA,MAAOV,EAAkB,eAAkB,sBAFzD,S,EAUJoE,cAAgB,WACd,OAAI,mBAGF,4BAGA,cAAiB,yBAAjB,GAAiD,yBAAjD,GACE,WADF,UAC2B,WAD3B,WACqD,WADrD,YAEA,kBAGA,cACA,4BAGA,wB,EAYJC,kBAAoB,WAClB,GAAI,sBAAJ,EAAkC,CAEhC,IAAM5E,EAAI,eAAkB,sBAA5B,GACM6E,EAAI,4BAAiC,WAAjC,UAA2D,WAArE,aACMC,EAAI,4BAAiC,WAAjC,WAA4D,WAAtE,aACMC,EAAI,cAAV,EACMC,EAAI,eAAV,EACA,sBAA6B,WAA7B,YACA,IAAIC,GAAcD,EAAD,IAAjB,EAOA,GANA,wBACA,oCACA,uCACA,gDACA,2BAA8BhF,6BAA+BA,cAAhC,yBAA7B,GAAwG6E,EAAIE,IAA5G,EAAoHD,EAAIG,EAAxH,GAEG,uBAA4B,WAA/B,oBAAkE,CAGhE,IAFA,IAAIC,EAAJ,EACIC,EAAJ,EACSC,EAAI,sBAAb,EAA2CA,GAAK,sBAA2B,WAA3E,oBAA8GA,IAC5GF,IAAsB,qCAAD,YAAsD,qBAAYG,EAAMC,EAAlB,MAA3EJ,GACAC,IAAqB,oCAAD,YAAqD,qBAAYE,EAAMC,EAAlB,MAAzEH,GAEF,IAAMI,EAAiBJ,EAAvB,EACA,0BAA6BI,UAA7B,GAAuDV,EAAIE,EAA3D,EAAiED,EAAjE,GAAqEG,GAEvE,6CACA,uCACA,qCAAyCJ,EAAIE,EAA7C,EAAoDD,IAAIG,EAAxD,GACA,6B,EAOJO,UAAY,WAAM,MAEhB,cACE,yBADF,GACkC,4BAAiC,WADnE,WAEE,WAFF,UAE2B,WAF3B,YAEsD,WAFtD,YAKA,wBACA,6BACA,2BAA8B,yBAA9B,GAA8D,4BAAiC,WAA/F,YACA,6BACA,wBAA2B,WAA3B,aACA,oCACA,oCACA,IAAMC,EAAmB,+CAAzB,GACMC,EAAeC,SAASF,IAAoB,uDAA7BE,KAArB,EAEA,oBAAsB,cACpB,GAAIP,MAAJ,EAA4B,CAC1B,IAAIP,EAAI,SAAY7E,EAApB,IACA,6BACA,0BAA8B,WAA9B,cACA,0BAA6BA,EAA7B,KAAsC,wBAA6B,WAAnE,sBAGJ,kCACA,mCACA,0CAA6CY,EAAe,EAA5D,iBAAsF,wBAA6B,WAA7B,iBAAtF,IACA,IAAImE,EAAI,6CAAgDnE,EAAe,EAA/D,eAAR,MACMgF,EAAwBjF,EAAuB,EAArD,cACA,2CAA8CC,EAAe,EAAD,aAA5D,SAAyF,GAAKmE,EAA9F,GAAsG,wBAA6B,WAA7B,iBAAtG,IACA,2BAAgC,WAAhC,0BACAA,GAAK,8CAAiDnE,EAAe,EAAD,aAA/D,UAALmE,MACA,wCACA,+BAAyD,GAAKA,EAA9D,GAAsE,wBAA6B,WAA7B,iBAAtE,IACAA,GAAK,mCAALA,MACI,sBAAJ,IACE,2BAAgC,WAAhC,iBACA,mCAAsC,eAAkB,sBAAlB,eAAtC,8BACgB,eAAkB,sBAAlB,eADhB,cAEM,GAAKA,EAFX,GAEmB,wBAA6B,WAA7B,iBAFnB,KAIF,2BAAgC,WAAhC,iBACA,+BACA,6BAAkC,WAAlC,UACA,0BACA,4B,EAMFc,wBAA0B,WACxB,UAAI,gBAA6B,CAE/B,cACE,4BAAiC,WADnC,UAC4D,yBAD5D,GAEE,WAFF,WAE4B,sBAA2B,WAFvD,aAEmF,WAFnF,YAKA,wBACA,6BACA,2BAA8B,4BAAiC,WAA/D,UAAwF,yBAAxF,IACA,6BACA,0BAA8B,sBAA2B,WAAzD,cACA,mCACA,oCACA,IAAIC,EAAJ,EACA,qBAAuB,SAAA9F,GACrB,IAAI8E,EAAI,SAAR,GACA,6BACA,wBAA2B,WAA3B,gBACA,0BAA6B9E,UAA7B,GAA2C,wBAA6B,WAAxE,iBAAwG8E,EAAxG,EAA+G,sBAA2B,WAA3B,aAAwD,WAAvK,kBACA,IAAIiB,EAAK,6BAAgC/F,UAAhC,IAAT,MACA8F,EAAeA,OAAfA,KAEF,+BACA,6BAAkC,WAAlC,UACA,0BACA,2BAGA,IAAMjB,EAAI,4BAAiC,WAAjC,YAA0E,WAA1E,aAAuG,WAAvG,iBAAwI,WAAlJ,uBACMC,EAAI,yBAAV,GACA,yB,EASJkB,gBAAkB,cACZ,sBAAJ,IACE,OAAI,oBACF,yBACA,wBAEF,kBAAuB/E,EAAA,OAAS,SAAAgF,GAE9B,IAAMC,EAAIvC,WAAY1C,YAAagF,EAAU,WAA7C,2BAIA,kBACQ,WADR,YACmC,sBAA2B,WAD9D,aAC0F,WAD1F,YAGA,IAAMjB,EAAI,qBAAV,EACMhF,EAAI,eAAkB,sBAA5B,GACMmG,EAAe3F,EAArB,GACA,wBACA,gCACA,6BACA,uCACA,IAAM4F,EAAW,SAACC,EAAKC,EAAOC,GAC5BF,OAAQ,SAAAG,GACN,6BACA,IAAMzC,EAAI,yBAA8ByC,EAAD,IAAvC,GAEA,sBAAyBA,EAAzB,MAAmCvF,oBAAqB,sBAAyBuF,EAAzB,OAArBvF,KAAnCiF,GACA,4BAAgC,SAAYM,EAA5C,MAAqD,sBAAyBA,EAA9E,SACA,IAAIT,EAAK,6BAAgCS,EAAhC,KAAT,MACI,uBAA4B,sBAAyBA,EAArD,SAAJ,GAEE,mCACA,2BAAgC,WAAhC,iBACA,0BAA6BA,EAA7B,IAAoC,sBAAyBA,EAAzB,MAApC,EAA0E,SAAYA,EAAZ,MAAsBxB,EAAtB,EAA1E,KAEA,iCACA,6BACA,0BAA6BwB,EAA7B,IAAoC,sBAAyBA,EAAzB,MAApC,EAA0E,SAAYA,EAAZ,MAAsBxB,EAAtB,EAA1E,QAINoB,EAASpG,cAAD,KAAqB,WAArB,SAA6C,WAArDoG,gBACAA,EAASpG,cAAD,MAAsB,WAAtB,UAA+C,WAAvDoG,iBACA,2BAIA,IAAIF,GAAS,8B,EAQnBO,cAAgB,WAEd,GADA,wBACI,UAAe,EAAf,QAA8B,EAA9B,aAAJ,OAAsD,iBAA8B,CAClF,IAAMC,EAAkB/F,EAAuB,EAA/C,cACY,qBACA,qBACZ,2BAA8B,yBAA9B,GAA8D,yBAA9D,IACA,oBAAsB,SAAAX,GACpB,IAAMC,EAAcD,EAApB,YACM2G,EAAK3G,EAAX,GACMmG,EAAe3F,EAArB,GAEA,GAAIP,QAAoBA,cAAxB,EAAqD,CACnD,IAAIqG,EAAQrF,QAAS,WAATA,UAAZ,MACAhB,YAAqB,SAAA2G,GACnBN,UAAgBM,MAAhBN,EACA,2BAAgCA,EAAhC,WACA,0BACE,SADF,GAEE,SAAYM,EAFd,MAGE,SAHF,YAIE,SAJF,gBASJ,GAAI3G,SAAqBA,eAAzB,EAAuD,CACrD,IAAIqG,EAAQrF,QAAS,WAATA,WAAZ,MACAhB,aAAsB,SAAA4G,GACpBP,UAAgBO,MAAhBP,EACA,2BAAgCA,EAAhC,WACA,0BACE,SADF,GAEE,SAAYO,EAFd,MAGE,SAHF,YAIE,SAJF,gBASJ,IAAIP,EAAQrF,QAAS,WAATA,YAAZ,MACAqF,YACA,6BACA,2BAAgCA,EAAhC,WACA,IAAMQ,EAAY,mCAAwC7G,EAAD,cAAzD,GACA,6BACA,qBACE,SADF,GAEE,UAAaA,EAFf,qBAGQ,EAAI0D,KAHZ,IAKA,2BAGF,6BACA1C,YACK,SAAAjB,GAAC,OAAI,SAAYA,EAAhB,OADNiB,GAEK,SAAAjB,GAAC,OAAI,UAAaA,cAAjB,oBAFNiB,MAGSA,EAHTA,qBAIW,EAJXA,gBAKG,EALHA,cAMA,6BACA,6BAAkC,WAAlC,WACA,0BAEF,4B,EAWF8F,YAAc,oBAEZ,OAAI,mBACF,wBACA,2BAAgCT,GAAS,WAAzC,WACA,mCACA,6B,EAUJU,QAAU,YAEJnH,GAAQA,SAAZ,IACE,SACA,yB,EAQJoH,QAAU,YACR,kBAAW,IACT,eACA,yB,EAOJC,mBAAqB,WAEnB,iBAAoB,cAAmB,EAAnB,aAApB,I,EAOFC,eAAiB,YACXC,IAAa,EAAbA,gBAAoCA,GAApCA,GAAqDA,EAAW,cAAmB,EAAvF,eAEE,eAAoB,eAA0BA,EAAW,EAAzD,cACA,mBACI,mBAAwB,cAAmB,EAAnB,aAA5B,IAEE,iBAIF,oB,EAQJC,aAAe,YACb,IAAItD,EAAIJ,SAASA,WAATA,GAA4B,cAApC,GACIG,EAAK,eAATC,EACA,iBACA,iBAAoB,iBAApB,I,oHAliBFuD,oCAEE,IAAMC,EAAeC,KAAKC,MAAMhD,QAAUiD,EAArB,OAChBF,KAAKC,MAAM/C,SAAWgD,EAD3B,OAKA,OAHA,GACEF,KAAA,uBAEF,G,EAIFG,6BAEE,OAAIH,KAAKpG,UAAUwG,UACjBJ,KAAA,eAAsBA,KAAKpG,UAAUwG,QAAQC,WAA7C,MACAL,KAAA,gBACAA,KAAA,yB,EAGJM,8BAEE,OAAIN,KAAKpG,UAAUwG,UACjBJ,KAAA,eAAsBA,KAAKpG,UAAUwG,QAAQC,WAA7C,MACAL,KAAA,gBACAA,KAAA,yB,EAGJO,gCACEP,KAAA,wB,EA4gBFQ,kBAAS,MACmBR,KADnB,MACC/C,EADD,QACQC,EADR,SAGP,OACE,4BAAQuD,IAAKT,KAAb,UAA6B/C,MAAOA,GAApC,IAAkDC,OAAQA,GAA1D,IAAyEwD,SAAzE,EACEC,MAAO,CACLC,QADK,QAEL3D,MAFK,OAGLC,OAHK,OAIL2D,OAAQ,gB,EAxlBGlH,CAAqBE,IAAMiH,WCpBjC,G,MAAA,WAAO,IAAD,EAEWjH,IAAMkH,UAAS,GAF1B,mBAEZC,EAFY,KAEHC,EAFG,KAGbC,EAAcrH,IAAMsH,OAAO,MAE3BC,EAAavH,IAAMsH,OAAO,MALb,EAMetH,IAAMkH,SAAS,CAAC,EAAG,IANlC,mBAMZM,EANY,KAMDC,EANC,KAkEnB,OAzDAzH,IAAM0H,WAAU,WACdN,GAAW,GACXO,MAAM,YAAYC,KAAlB,uCAAuB,yDAAAvI,EAAA,sDAASwI,EAAT,EAASA,KAAMC,EAAf,EAAeA,QAC9BC,EAASF,EAAKG,YAEdC,GAAiBH,EAAQI,IAAI,kBAE/BC,EAAiB,EACjBC,EAAS,GANQ,uBAQWL,EAAOM,OARlB,mBAQXC,EARW,EAQXA,KAAMC,EARK,EAQLA,OACVD,EATe,qDAYnBF,EAAOI,KAAKD,GACZJ,GAAkBI,EAAME,OAEI,OAAxBpB,EAAYd,UACdc,EAAYd,QAAQmC,UAApB,wBAAiD,IAAMP,EAAiBF,GAAeU,QAAQ,GAA/F,UAhBiB,uBAsBrB,IAFIC,EAAY,IAAIC,WAAWV,GAC3BpC,EAAW,EACf,MAAkBqC,EAAlB,eAASU,EAAiB,KACxBF,EAAUnK,IAAIqK,EAAO/C,GACrBA,GAAY+C,EAAML,OAGhBM,EAAS,IAAIC,YAAY,SAASC,OAAOL,GAElB,OAAvBrB,EAAWhB,SACbgB,EAAWhB,QAAQZ,QACjBoD,EAAOG,MAAM,MACVC,QAAO,SAAAhE,GAAC,MAAiB,KAAbA,EAAEiE,UACdC,KAAI,SAAAlE,GAAC,OAAImE,KAAKC,MAAMpE,OAG3BiC,GAAW,GApCU,4CAAvB,yDAsCC,IAIHpH,IAAM0H,WAAU,WACd,IAAM8B,EAAW,WACf/B,EAAa,CACXgC,OAAOC,WACPD,OAAOE,eAKX,OAFAH,IACAC,OAAOG,iBAAiB,SAAUJ,GAC3B,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAID,kBAAC,IAAMM,SAAP,KAEG3C,GACC,yBAAK4C,UAAU,oBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,UAAf,eAEF,yBAAKnD,IAAKS,GAAV,wBAGJ,kBAAC,EAAD,CAAcT,IAAKW,EAAYnE,MAAOoE,EAAU,GAAInE,OAAQmE,EAAU,KAEtE,yBAAKuC,UAAU,gBACb,4BAAQC,QAAS,WAAmC,OAAvBzC,EAAWhB,SAAkBgB,EAAWhB,QAAQP,aAAa,MAA1F,iBACA,4BAAQgE,QAAS,WAAmC,OAAvBzC,EAAWhB,SAAkBgB,EAAWhB,QAAQP,aAAa,OAA1F,kBACA,4BAAQgE,QAAS,WAAmC,OAAvBzC,EAAWhB,SAAkBgB,EAAWhB,QAAQP,aAAa,OAA1F,kBACA,4BAAQgE,QAAS,WAAmC,OAAvBzC,EAAWhB,SAAkBgB,EAAWhB,QAAQP,aAAa,OAA1F,kBACA,4BAAQgE,QAAS,WAAmC,OAAvBzC,EAAWhB,SAAkBgB,EAAWhB,QAAQP,aAAa,OAA1F,kBACA,4BAAQgE,QAAS,WAAmC,OAAvBzC,EAAWhB,SAAkBgB,EAAWhB,QAAQP,aAAa,OAA1F,mBACA,4BAAQgE,QAAS,WACf,IACId,EADWO,OAAOQ,OAAO,iBAAkB,YAC5Bf,MAAM,KACrBnD,EAAyB,OAAZmD,EAAM,GAAG,GAAqB,IAATA,EAAM,KAAWA,EAAM,GAClC,OAAvB3B,EAAWhB,SAAkBgB,EAAWhB,QAAQT,eAAeC,KAJrE,oBCrFRmE,IAASvD,OAAO,kBAACwD,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4b6bfa8f.chunk.js","sourcesContent":["/**\r\n * Extract buy/sell bid prices from data points\r\n * @param {any[]} data \r\n * @returns {number[]}\r\n */\r\nexport const extractBidPrices = (data) => {\r\n  const set = new Set(data.map(d => {\r\n    const marketDepth = d.marketDepth;\r\n    if (marketDepth) {\r\n      let buys = marketDepth.buys.map(b => +b.rate);\r\n      let sells = marketDepth.sells.map(b => +b.rate);\r\n      return buys.concat(sells, [+marketDepth.lastTradedPrice]);\r\n    }\r\n    return [];\r\n  }).reduce((acc, val) => acc.concat(val), []));\r\n  return Array.from(set);\r\n}\r\n\r\n/**\r\n * Extract buy/sell bid volumnes from a single data point\r\n * @param {any} data \r\n * @returns {number[]}\r\n */\r\nexport const extractBidVolumes = (data) => {\r\n  const marketDepth = data.marketDepth;\r\n  if (marketDepth) {\r\n    let buys = marketDepth.buys.map(b => +b.qty);\r\n    let sells = marketDepth.sells.map(b => +b.qty);\r\n    return buys.concat(sells);\r\n  }\r\n  else return [];\r\n}\r\n\r\n/**\r\n * Extract max volume (buy or sell) for a data point\r\n * @param {any} data \r\n * @returns {number}\r\n */\r\nexport const extractMaxVolume = (data) => {\r\n  const vols = extractBidVolumes(data).sort((a, b) => a - b);\r\n  if (vols.length > 0) return vols[vols.length - 1];\r\n  else return 1;\r\n}\r\n\r\n/**\r\n * Extract max traded volume within a given set of datapoints\r\n * @param {any[]} data \r\n * @returns {number}\r\n */\r\nexport const extractMaxTradedVolume = (data) => {\r\n  let vols = data.map(d => {\r\n    if (d.marketDepth) return +d.marketDepth.lastTradedQty;\r\n    else return 0;\r\n  }).sort((a, b) => a - b);\r\n  if (vols.length > 0) return vols[vols.length - 1];\r\n  else return 1;\r\n}\r\n\r\n/**\r\n * Format zoom scale time\r\n * @param {number} seconds \r\n */\r\nexport const zoomTimeFormat = (seconds, decimal) => {\r\n  if(!decimal) decimal = 2;\r\n  if(seconds > 59) {\r\n    if(seconds > 3599) {\r\n      let hrs = seconds/3600;\r\n      return `${hrs.toFixed(decimal)} hour${hrs>1?'s':''}`;\r\n    } \r\n    else {\r\n      let mins = seconds/60;\r\n      return `${mins.toFixed(decimal)} minute${mins>1?'s':''}`;\r\n    }\r\n  }\r\n  else return `${seconds} second${seconds>1?'s':''}`;\r\n}","import React from 'react';\nimport * as d3Scale from 'd3-scale';\nimport * as d3Array from 'd3-array';\nimport * as d3Color from 'd3-color';\nimport * as d3Format from 'd3-format';\nimport * as d3Interpolate from 'd3-interpolate';\nimport * as d3Shape from 'd3-shape';\nimport * as d3Timer from 'd3-timer';\nimport * as d3Ease from 'd3-ease';\nimport { extractBidPrices, extractBidVolumes, extractMaxTradedVolume, extractMaxVolume, zoomTimeFormat } from './utils';\n\nexport const d3 = Object.assign(\n  Object.assign(\n    Object.assign({}, d3Scale, d3Array, d3Color)\n    , d3Format, d3Interpolate, d3Shape\n  )\n  , d3Ease, d3Timer\n);\n\n/**\n * Stock Heatmap\n * @author Rounak Saha\n * \n * © Copyright 2020, Rounak Saha\n */\nexport default class StockHeatmap extends React.Component {\n\n  /** @type {React.RefObject<HTMLCanvasElement>} */\n  canvasRef = React.createRef();\n  /** @type {CanvasRenderingContext2D} */\n  drawingContext = null;\n\n  data = [];\n  windowedData = [];\n  windowLength = 40;\n  windowPosition = 0;\n  autoScroll = true;\n\n  /** Default Theme colors and dimensions */\n  defaults = {\n    borderPadding: [5, 5, 0, 0],\n    bidAskWidth: 100,\n    axisYWidth: 50,\n    axisXHeight: 50,\n    buyColor: '#388e3c',\n    textOnBuyColor: '#ffffff',\n    sellColor: '#d32f2f',\n    textOnSellColor: '#ffffff',\n    textOnBackground: '#000000',\n    textHighlightOnBackground: '#ff0000',\n    tradeColor: '#7434eb',\n    axisTickSize: 6,\n    axisColor: '#000000',\n    xAxisTextPadding: 6,\n    yAxisTextPadding: 6,\n    bidAskGraphPaddingLeft: 10,\n    bidAskTransitionDuration: 500,\n    volumeCircleMaxRadius: 10,\n    runningRatioSeconds: 5,\n    hmWidth: () => (this.props.width - this.defaults.borderPadding[1] - this.defaults.borderPadding[3] - this.defaults.bidAskWidth - this.defaults.axisYWidth),\n    hmHeight: () => (this.props.height - this.defaults.borderPadding[0] - this.defaults.borderPadding[2] - this.defaults.axisXHeight),\n    clearColor: '#ffffff',\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // console.log('shouldComponentUpdate', nextProps);\n    const shouldUpdate = this.props.width !== nextProps.width\n      || this.props.height !== nextProps.height;\n    if (shouldUpdate) {\n      this.detachMouseListeners();\n    }\n    return shouldUpdate;\n  }\n\n  // -------------------START:: Lifecycle methods to retrive 2d context from updated dom-------------------------\n  componentDidMount() {\n    // console.log('component mouted');\n    if (this.canvasRef.current !== null) {\n      this.drawingContext = this.canvasRef.current.getContext('2d');\n      this.updateHeatmap();\n      this.attachMouseListeners();\n    }\n  }\n  componentDidUpdate() {\n    // console.log('component updtated');\n    if (this.canvasRef.current !== null) {\n      this.drawingContext = this.canvasRef.current.getContext('2d');\n      this.updateHeatmap();\n      this.attachMouseListeners();\n    }\n  }\n  componentWillUnmount() {\n    this.detachMouseListeners();\n  }\n  // -------------------END:: Lifecycle methods to retrive 2d context from updated dom---------------------------\n\n\n  // ------------------ START:: Mouse Event listeners -------------------\n  isMouseDown = false;\n  mouseDownX = 0;\n\n  /**\n   * Attaches mouse interaction event listeners\n   */\n  attachMouseListeners = () => {\n    if (this.canvasRef.current !== null) {\n      this.canvasRef.current.addEventListener('mousedown', this.eventMouseDown);\n      this.canvasRef.current.addEventListener('mousemove', this.eventMouseMove);\n      this.canvasRef.current.addEventListener('mouseup', this.eventMouseUp);\n      this.canvasRef.current.addEventListener('wheel', this.eventZoomWheel);\n      this.canvasRef.current.addEventListener('keydown', this.eventKeyDown);\n    }\n  }\n\n  /**\n   * Detaches mouse interaction event listeners\n   */\n  detachMouseListeners = () => {\n    if (this.canvasRef.current !== null) {\n      this.canvasRef.current.removeEventListener('mousedown', this.eventMouseDown);\n      this.canvasRef.current.removeEventListener('mousemove', this.eventMouseMove);\n      this.canvasRef.current.removeEventListener('mouseup', this.eventMouseUp);\n      this.canvasRef.current.removeEventListener('wheel', this.eventZoomWheel);\n      this.canvasRef.current.removeEventListener('keydown', this.eventKeyDown);\n    }\n  }\n\n  /**\n   * Mouse down event on canvas\n   * @param {MouseEvent} e \n   */\n  eventMouseDown = (e) => {\n    // console.log('eventMouseDown', e);\n    this.isMouseDown = true;\n    this.mouseDownX = e.x;\n  }\n\n  /**\n   * Mouse move event on canvas\n   * @param {MouseEvent} e \n   */\n  eventMouseMove = (e) => {\n    if (this.isMouseDown) {\n      // Mouse drag, scroll the time series\n      const dragLength = e.x - this.mouseDownX;\n      const moveDataPointsCount = Math.floor(Math.abs(dragLength) / this.xScale.bandwidth());\n      if (moveDataPointsCount > 0) this.mouseDownX = e.x;\n      // const moveDataPointDirection = dragLength >= 0 ? 'right' : 'left';\n      // console.log('drag x=', dragLength, moveDataPointsCount, this.windowPosition);\n      this.moveDataWindow(this.windowPosition + moveDataPointsCount * (dragLength >= 0 ? -1 : 1));\n    }\n    else {\n      // normal mouse move\n\n    }\n  }\n\n  /**\n   * Mouse up event on canvas\n   * @param {MouseEvent} e \n   */\n  eventMouseUp = (e) => {\n    // console.log('eventMouseUp',e);\n    this.isMouseDown = false;\n    this.mouseDownX = 0;\n  }\n\n  /**\n   * Wheel event on canvas to zoom\n   * @param {WheelEvent} e \n   */\n  eventZoomWheel = (e) => {\n    const direction = e.deltaY < 0 ? 'zoom-in' : 'zoom-out';\n    let l = 0, l2 = 0;\n    switch (direction) {\n      case 'zoom-in':\n        l = Math.max(this.windowLength - 1, 3);\n        break;\n      case 'zoom-out':\n        l = Math.min(this.windowLength + 1, this.data.length - 1);\n        break;\n    }\n    l2 = this.windowLength - l;\n    this.windowLength = l;\n    this.moveDataWindow(this.windowPosition + l2);\n    // console.log('zoom Level=', this.windowLength);\n  }\n\n  /**\n   * Event to be triggered when keyboard key is pressed\n   * @param {KeyboardEvent} e \n   */\n  eventKeyDown = (e) => {\n    e.preventDefault();\n    console.log('key event', e.isComposing, e.key, e.ctrlKey);\n    switch (e.key) {\n      case 'ArrowLeft':\n        this.moveDataWindow(this.windowPosition - (e.ctrlKey ? 10 : 1));\n        break;\n      case 'ArrowRight':\n        this.moveDataWindow(this.windowPosition + (e.ctrlKey ? 10 : 1));\n        break;\n    }\n  }\n\n  // ------------------ END:: Mouse Event listeners ---------------------\n\n\n  // ------------------ D3 Variables ---------------------\n  /** @type {d3Scale.ScaleBand<string>} */\n  xScale = null;\n  /** @type {d3Scale.ScaleLinear<number, number>} */\n  bidAskScale = null;\n  /** @type {d3Scale.ScaleBand<string>} */\n  yScale = null;\n  /** @type {number[]} */\n  yDomainValues = null;\n  /** @type {d3Timer.Timer} */\n  bidAskAnimTimer = null;\n  /** @type {{[key:number]:number}} */\n  bidAskBarAnimConfig = {};\n  // ------------------ D3 Variables ---------------------\n\n  /**\n   * This function will be called if there is any dimension change on heatmap\n   * This function changes the d3 scales based on windowed data\n   */\n  updateHeatmapDimensions = () => {\n    // console.log('heatmap dimension updated, update scale domains');\n    const { width, height } = this.props;\n    if (width > 0 && height > 0 && this.windowedData.length > 0) {\n      // setup x-scale\n      this.xScale = d3.scaleBand()\n        .range([0, this.defaults.hmWidth()])\n        .domain(this.windowedData.map(d => d.ts));\n      // setup y-scale\n      this.yDomainValues = extractBidPrices(this.windowedData).sort((a, b) => a - b);\n      this.yScale = d3.scaleBand()\n        .range([this.defaults.hmHeight(), 0])\n        .domain(this.yDomainValues);\n      // setup bid ask scale\n      this.bidAskScale = d3.scaleLinear()\n        .range([0, this.defaults.bidAskWidth])\n        .domain([0, d3.max(extractBidVolumes(this.windowedData[this.windowedData.length - 1]))]);\n    }\n  }\n\n\n  /**\n   * This method will be called after an update of internal data is performed.\n   */\n  updateHeatmap = () => {\n    if (this.drawingContext !== null) {\n      // console.log('heatmap update req');\n      // 1. update scale and dimensions\n      this.updateHeatmapDimensions();\n\n      // 2. Draw the bid ask spread heatmap\n      this.clearCanvas(this.defaults.borderPadding[3], this.defaults.borderPadding[0],\n        this.defaults.hmWidth(), this.defaults.hmHeight(), this.defaults.clearColor);\n      this.drawMainGraph();\n\n      // 3. Draw xy Axis\n      this.drawXAxis();\n      this.drawYAxisAndBidAskGraph();\n\n      // 4. Draw buy-to-sell ratio\n      this.drawBuy2SellRatio();\n\n      // console.log('heatmap draw update');\n      // this.clearCanvas(0, 0, this.defaults.hmWidth(), this.defaults.hmHeight(), '#aaaaaa');\n    }\n  }\n\n  // ------------------------------ START: Canvas draw functions ---------------------------------------\n\n  /**\n   * Draw buy/sell ratio at bottom right corner\n   */\n  drawBuy2SellRatio = () => {\n    if (this.windowedData.length > 0) {\n      // dimension\n      const d = this.windowedData[this.windowedData.length - 1];\n      const x = this.defaults.borderPadding[3] + this.defaults.hmWidth() + this.defaults.axisTickSize;\n      const y = this.defaults.borderPadding[0] + this.defaults.hmHeight() + this.defaults.axisTickSize;\n      const w = this.props.width - x;\n      const h = this.props.height - y;\n      this.clearCanvas(x, y, w, h, this.defaults.clearColor);\n      let textHeight = (h - 10) / 2;\n      this.drawingContext.save();\n      this.drawingContext.textAlign = 'center';\n      this.drawingContext.textBaseline = 'middle';\n      this.drawingContext.font = `bold ${textHeight}px sans-serif`;\n      this.drawingContext.fillText((d.marketDepth.buyOrderVolume / d.marketDepth.sellOrderVolume).toFixed(2), x + w *3/4, y + textHeight / 2);\n      // Runing average ratio\n      if(this.windowedData.length >= this.defaults.runningRatioSeconds) {\n        let sellT20RunningSum = 0;\n        let buyT20RunningSum = 0;\n        for (let i = this.windowedData.length - 1; i >= this.windowedData.length - this.defaults.runningRatioSeconds; i--) {\n          sellT20RunningSum += (this.windowedData[i].marketDepth.sells || []).reduce((vol, s) => vol + s.qty,0);\n          buyT20RunningSum += (this.windowedData[i].marketDepth.buys || []).reduce((vol, s) => vol + s.qty,0);\n        }\n        const newBSTPFactor = (buyT20RunningSum / sellT20RunningSum);\n        this.drawingContext.fillText(newBSTPFactor.toFixed(2), x + w /4, y + textHeight *0.5);\n      }\n      this.drawingContext.font = `bold ${13}px sans-serif`;\n      this.drawingContext.textBaseline = 'bottom';\n      this.drawingContext.fillText('Buy/Sell', x + w / 2, y + textHeight * 2 + 5);\n      this.drawingContext.restore();\n    }\n  }\n\n  /**\n   * Draws X Axis\n   */\n  drawXAxis = () => {\n    // clear canvas before axis draw\n    this.clearCanvas(\n      this.defaults.borderPadding[3], this.defaults.borderPadding[0] + this.defaults.hmHeight(),\n      this.defaults.hmWidth(), this.defaults.axisXHeight, this.defaults.clearColor\n    );\n    // draw axis\n    this.drawingContext.save();\n    this.drawingContext.beginPath();\n    this.drawingContext.translate(this.defaults.borderPadding[3], this.defaults.borderPadding[0] + this.defaults.hmHeight());\n    this.drawingContext.moveTo(0, 0);\n    this.drawingContext.lineTo(this.defaults.hmWidth(), 0);\n    this.drawingContext.textAlign = 'center';\n    this.drawingContext.textBaseline = 'top';\n    const assumedTextWidth = this.drawingContext.measureText('77:77:77').width + 20;\n    const bandInterval = parseInt(assumedTextWidth / (this.xScale?.bandwidth() || 1)) || 1;\n    // console.log('bandInterval=', bandInterval);\n    this.windowedData.map((d, i) => {\n      if (i % bandInterval === 0) {\n        let x = this.xScale(d.ts);\n        this.drawingContext.moveTo(x, 0);\n        this.drawingContext.lineTo(x, this.defaults.axisTickSize);\n        this.drawingContext.fillText(d.ts, x, this.defaults.axisTickSize + this.defaults.xAxisTextPadding);\n      }\n    });\n    this.drawingContext.textAlign = 'left';\n    this.drawingContext.font = '12px Arial';\n    this.drawingContext.fillText(`Zoom Level:  ${zoomTimeFormat(this.windowLength)}`, 20, this.defaults.axisTickSize + this.defaults.xAxisTextPadding + 20);\n    let w = this.drawingContext.measureText(`Zoom Level:  ${zoomTimeFormat(this.windowLength)}`).width;\n    const maxVolumeInWindowData = extractMaxTradedVolume(this.windowedData);\n    this.drawingContext.fillText(`Max Volume in ${zoomTimeFormat(this.windowLength, 1)}:  `, 20 + w + 20, this.defaults.axisTickSize + this.defaults.xAxisTextPadding + 20);\n    this.drawingContext.fillStyle = this.defaults.textHighlightOnBackground;\n    w += this.drawingContext.measureText(`Max Volume in ${zoomTimeFormat(this.windowLength, 1)}:  `).width;\n    this.drawingContext.font = 'bold 12px Arial';\n    this.drawingContext.fillText(`${maxVolumeInWindowData}`, 20 + w + 20, this.defaults.axisTickSize + this.defaults.xAxisTextPadding + 20);\n    w += this.drawingContext.measureText(`${maxVolumeInWindowData}`).width;\n    if (this.windowedData.length > 0) {\n      this.drawingContext.fillStyle = this.defaults.textOnBackground;\n      this.drawingContext.fillText(`LTP:  ${this.windowedData[this.windowedData.length - 1].marketDepth.lastTradedPrice\n        }     LTQ:  ${this.windowedData[this.windowedData.length - 1].marketDepth.lastTradedQty\n        }`, 20 + w + 40, this.defaults.axisTickSize + this.defaults.xAxisTextPadding + 20);\n    }\n    this.drawingContext.fillStyle = this.defaults.textOnBackground;\n    this.drawingContext.lineWidth = 1.2;\n    this.drawingContext.strokeStyle = this.defaults.axisColor;\n    this.drawingContext.stroke();\n    this.drawingContext.restore();\n  }\n\n  /**\n   * Draws Y Axis and Bid Ask graph at the same time\n   */\n  drawYAxisAndBidAskGraph = () => {\n    if (this.yDomainValues !== null) {\n      // clear canvas before axis draw\n      this.clearCanvas(\n        this.defaults.borderPadding[3] + this.defaults.hmWidth(), this.defaults.borderPadding[0],\n        this.defaults.axisYWidth, this.defaults.hmHeight() + this.defaults.axisTickSize, this.defaults.clearColor\n      );\n      // translate and draw\n      this.drawingContext.save();\n      this.drawingContext.beginPath();\n      this.drawingContext.translate(this.defaults.borderPadding[3] + this.defaults.hmWidth(), this.defaults.borderPadding[0]);\n      this.drawingContext.moveTo(0, 0);\n      this.drawingContext.lineTo(0, this.defaults.hmHeight() + this.defaults.axisTickSize);\n      this.drawingContext.textAlign = 'start';\n      this.drawingContext.textBaseline = 'top';\n      let maxTextWidth = 0;\n      this.yDomainValues.map(d => {\n        let y = this.yScale(d);\n        this.drawingContext.moveTo(0, y);\n        this.drawingContext.lineTo(this.defaults.axisTickSize, y);\n        this.drawingContext.fillText(d.toFixed(2), this.defaults.axisTickSize + this.defaults.yAxisTextPadding, y + 2, this.defaults.axisYWidth - this.defaults.axisTickSize + this.defaults.yAxisTextPadding);\n        let tw = this.drawingContext.measureText(d.toFixed(2)).width;\n        maxTextWidth = maxTextWidth >= tw ? maxTextWidth : tw;\n      });\n      this.drawingContext.lineWidth = 1.2;\n      this.drawingContext.strokeStyle = this.defaults.axisColor;\n      this.drawingContext.stroke();\n      this.drawingContext.restore();\n\n      // Now I will draw the bid ask strength graph,\n      const x = this.defaults.borderPadding[3] + this.defaults.hmWidth() + maxTextWidth + this.defaults.axisTickSize + this.defaults.yAxisTextPadding + this.defaults.bidAskGraphPaddingLeft;\n      const y = this.defaults.borderPadding[0];\n      this.drawBidAskGraph(x, y);\n    }\n  }\n\n  /**\n   * Draw and animate Bid Ask graph\n   * @param {number} x \n   * @param {number} y \n   */\n  drawBidAskGraph = (x, y) => {\n    if (this.windowedData.length > 0) {\n      if (this.bidAskAnimTimer !== null) {\n        this.bidAskAnimTimer.stop();\n        this.bidAskAnimTimer = null;\n      }\n      this.bidAskAnimTimer = d3.timer(elapsed => {\n        // compute how far through the animation we are (0 to 1)\n        const t = Math.min(1, d3.easeCubic(elapsed / this.defaults.bidAskTransitionDuration));\n\n        // ----------------draw--------------------\n        // console.log('drawing bid ask graph');\n        this.clearCanvas(\n          x, y, this.defaults.bidAskWidth, this.defaults.hmHeight() + this.defaults.axisTickSize, this.defaults.clearColor\n        );\n        const h = this.yScale.bandwidth() - 2;\n        const d = this.windowedData[this.windowedData.length - 1];\n        const maxBidAskVol = extractMaxVolume(d);\n        this.drawingContext.save();\n        this.drawingContext.translate(x, y);\n        this.drawingContext.lineWidth = 0;\n        this.drawingContext.textBaseline = 'middle';\n        const drawBars = (arr, color, textColor) => {\n          arr.map(v => {\n            this.drawingContext.fillStyle = color;\n            const l = this.defaults.bidAskWidth * (+v.qty / maxBidAskVol);\n            // save v bars length\n            this.bidAskBarAnimConfig[v.rate] = d3.interpolateNumber(this.bidAskBarAnimConfig[v.rate] || 0, l)(t);\n            this.drawingContext.fillRect(0, this.yScale(v.rate), this.bidAskBarAnimConfig[v.rate], h);\n            let tw = this.drawingContext.measureText(v.qty).width;\n            if (this.defaults.bidAskWidth - this.bidAskBarAnimConfig[v.rate] - 2 >= tw) {\n              // text outside bar\n              this.drawingContext.textAlign = 'start';\n              this.drawingContext.fillStyle = this.defaults.textOnBackground;\n              this.drawingContext.fillText(v.qty, this.bidAskBarAnimConfig[v.rate] + 2, this.yScale(v.rate) + h / 2 + 1);\n            } else {\n              this.drawingContext.textAlign = 'end';\n              this.drawingContext.fillStyle = textColor;\n              this.drawingContext.fillText(v.qty, this.bidAskBarAnimConfig[v.rate] - 2, this.yScale(v.rate) + h / 2 + 1);\n            }\n          });\n        }\n        drawBars(d.marketDepth.buys, this.defaults.buyColor, this.defaults.textOnBuyColor);\n        drawBars(d.marketDepth.sells, this.defaults.sellColor, this.defaults.textOnSellColor);\n        this.drawingContext.restore();\n        // ----------------draw--------------------\n\n        // if this animation is over\n        if (t === 1) this.bidAskAnimTimer.stop();\n      });\n    }\n  }\n\n  /**\n   * Draws background heatmap for both buys and sells\n   */\n  drawMainGraph = () => {\n    this.drawingContext.save();\n    if (this.xScale && this.yScale && this.bidAskScale && this.drawingContext !== null) {\n      const maxTradedVolume = extractMaxTradedVolume(this.windowedData);\n      const xh2 = this.xScale.bandwidth() * 0.5;\n      const yh2 = this.yScale.bandwidth() * 0.5;\n      this.drawingContext.translate(this.defaults.borderPadding[3], this.defaults.borderPadding[0]);\n      this.windowedData.map(d => {\n        const marketDepth = d.marketDepth;\n        const ts = d.ts;\n        const maxBidAskVol = extractMaxVolume(d);\n        // draw buys\n        if (marketDepth.buys && marketDepth.buys.length > 0) {\n          let color = d3.color(this.defaults.buyColor).rgb();\n          marketDepth.buys.map(buy => {\n            color.opacity = buy.qty / maxBidAskVol;\n            this.drawingContext.fillStyle = color.toString();\n            this.drawingContext.fillRect(\n              this.xScale(ts),\n              this.yScale(buy.rate),\n              this.xScale.bandwidth(),\n              this.yScale.bandwidth()\n            );\n          });\n        }\n        // draw sells\n        if (marketDepth.sells && marketDepth.sells.length > 0) {\n          let color = d3.color(this.defaults.sellColor).rgb();\n          marketDepth.sells.map(sell => {\n            color.opacity = sell.qty / maxBidAskVol;\n            this.drawingContext.fillStyle = color.toString();\n            this.drawingContext.fillRect(\n              this.xScale(ts),\n              this.yScale(sell.rate),\n              this.xScale.bandwidth(),\n              this.yScale.bandwidth()\n            );\n          });\n        }\n        // draw trade line and size\n        let color = d3.color(this.defaults.tradeColor).rgb();\n        color.opacity = 1;\n        this.drawingContext.lineWidth = 1;\n        this.drawingContext.fillStyle = color.toString();\n        const r = /*xh2*/ this.defaults.volumeCircleMaxRadius * (+marketDepth.lastTradedQty / maxTradedVolume);\n        this.drawingContext.beginPath();\n        this.drawingContext.arc(\n          this.xScale(ts) /* + xh2*/,\n          this.yScale(+marketDepth.lastTradedPrice) /* + yh2*/,\n          r, 0, 2 * Math.PI\n        );\n        this.drawingContext.fill();\n      });\n      // draw line path\n      this.drawingContext.beginPath();\n      d3.line()\n        .x(d => this.xScale(d.ts))\n        .y(d => this.yScale(+d.marketDepth.lastTradedPrice))\n        .curve(d3.curveLinear)\n        .context(this.drawingContext)\n        (this.windowedData);\n      this.drawingContext.lineWidth = 1;\n      this.drawingContext.strokeStyle = this.defaults.tradeColor;\n      this.drawingContext.stroke();\n    }\n    this.drawingContext.restore();\n  }\n\n  /**\n   * Clear the canvas area\n   * @param {number} x x coordinate\n   * @param {number} y y xoordinate\n   * @param {number} w width\n   * @param {number} h height\n   * @param {string} color color string\n   */\n  clearCanvas = (x, y, w, h, color) => {\n    // console.log('clear canvas area', x, y, w, h, color);\n    if (this.drawingContext !== null) {\n      this.drawingContext.save();\n      this.drawingContext.fillStyle = color || this.defaults.clearColor;\n      this.drawingContext.fillRect(x, y, w, h);\n      this.drawingContext.restore();\n    }\n  }\n\n  // ------------------------------ END: Canvas draw functions ---------------------------------------\n\n  /**\n   * Set Data for the Heatmap to generate\n   * @param {any[]} data The data to set\n   */\n  setData = (data) => {\n    // console.log('setdata called=', data);\n    if (data && data.length > 0) {\n      this.data = data;\n      this.updateWindowedData();\n    }\n  }\n\n  /**\n   * Add as extra data to existing data array.\n   * @param {any} data \n   */\n  addData = (data) => {\n    if (typeof (data) === 'object') {\n      this.data.push(data);\n      this.updateWindowedData();\n    }\n  }\n\n  /**\n   * This updates the data in array to be viewed in graph\n   */\n  updateWindowedData = () => {\n    // console.log('window data updated');\n    this.moveDataWindow(this.data.length - this.windowLength - 1);\n  }\n\n  /**\n   * Move the position of data window within the main data.\n   * @param {number} position The target position of the window to be moved to.\n   */\n  moveDataWindow = (position) => {\n    if (position !== this.windowPosition && position > -1 && position < this.data.length - this.windowLength) {\n      // move position only if within valid range\n      this.windowedData = this.data.slice(position, position + this.windowLength);\n      this.windowPosition = position;\n      if (this.windowPosition === this.data.length - this.windowLength - 1) {\n        // enable auto scroll\n        this.autoScroll = true;\n      }\n      // console.log('moveDataWindow = ', position, this.windowPosition, this.windowLength, this.data.length, this.autoScroll, this.windowedData);\n      // update the map\n      this.updateHeatmap();\n    }\n  }\n\n  /**\n   * This sets the Heatmap Zoom level aka. window.\n   * @param {number} zoom The seconds to zoom into\n   */\n  setZoomLevel = (zoom) => {\n    let l = Math.min(Math.max(zoom, 3), this.data.length - 1);\n    let l2 = this.windowLength - l;\n    this.windowLength = l;\n    this.moveDataWindow(this.windowPosition + l2);\n  }\n\n  /**\n   * Render Function\n   */\n  render() {\n    const { width, height } = this.props;\n    // console.log('heatmap rendered', width, height, this.data);\n    return (\n      <canvas ref={this.canvasRef} width={width || 300} height={height || 150} tabIndex={1}\n        style={{\n          display: 'block',\n          width: '100%',\n          height: '100%',\n          cursor: 'crosshair',\n        }}></canvas>\n    );\n  }\n}\n","import React from 'react';\r\nimport StockHeatmap from '@rongmz/react-stock-heatmap';\r\nimport '@rongmz/react-stock-heatmap/dist/index.css';\r\n\r\n\r\nexport default () => {\r\n\r\n  const [loading, setLoading] = React.useState(true);\r\n  const progressRef = React.useRef(null);\r\n  /** @type {React.MutableRefObject<StockHeatmap>} */\r\n  const heatmapRef = React.useRef(null);\r\n  const [windowDim, setWindowDim] = React.useState([0, 0]);\r\n\r\n  // ------------ Load data -------------\r\n  React.useEffect(() => {\r\n    setLoading(true);\r\n    fetch('20200814').then(async ({ body, headers }) => {\r\n      const reader = body.getReader();\r\n      // Step 2: get total length\r\n      const contentLength = +headers.get('Content-Length');\r\n      // Step 3: read the data\r\n      let receivedLength = 0; // received that many bytes at the moment\r\n      let chunks = []; // array of received binary chunks (comprises the body)\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) {\r\n          break;\r\n        }\r\n        chunks.push(value);\r\n        receivedLength += value.length;\r\n        // console.log(`Received ${receivedLength} of ${contentLength} %=${100 * (receivedLength / contentLength)}`)\r\n        if (progressRef.current !== null) {\r\n          progressRef.current.innerHTML = ` Downloading ${(100 * receivedLength / contentLength).toFixed(1)}% ...`\r\n        }\r\n      }\r\n      // Step 4: concatenate chunks into single Uint8Array\r\n      let chunksAll = new Uint8Array(receivedLength); // (4.1)\r\n      let position = 0;\r\n      for (let chunk of chunks) {\r\n        chunksAll.set(chunk, position); // (4.2)\r\n        position += chunk.length;\r\n      }\r\n      // Step 5: decode into a string\r\n      let result = new TextDecoder(\"utf-8\").decode(chunksAll);\r\n      // setdata\r\n      if (heatmapRef.current !== null) {\r\n        heatmapRef.current.setData(\r\n          result.split('\\n')\r\n            .filter(v => v.trim() !== '')\r\n            .map(v => JSON.parse(v))\r\n        );\r\n      }\r\n      setLoading(false);\r\n    })\r\n  }, []);\r\n  // ------------ Load data -------------\r\n\r\n  // ---------- window update ------------\r\n  React.useEffect(() => {\r\n    const updateFn = () => {\r\n      setWindowDim([\r\n        window.innerWidth,\r\n        window.innerHeight\r\n      ]);\r\n    }\r\n    updateFn();\r\n    window.addEventListener('resize', updateFn);\r\n    return () => window.removeEventListener('resize', updateFn);\r\n  }, []);\r\n  // ---------- window update ------------\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      {loading &&\r\n        <div className=\"loadingIndicator\">\r\n          <div className=\"loadingSpinner\">\r\n            <div className=\"loader\">Loading...</div>\r\n          </div>\r\n          <div ref={progressRef}> Downloading 0% ...</div>\r\n        </div>}\r\n\r\n      <StockHeatmap ref={heatmapRef} width={windowDim[0]} height={windowDim[1]} />\r\n\r\n      <div className=\"btnContainer\">\r\n        <button onClick={() => { if (heatmapRef.current !== null) heatmapRef.current.setZoomLevel(60) }}>zoom 1 minute</button>\r\n        <button onClick={() => { if (heatmapRef.current !== null) heatmapRef.current.setZoomLevel(60 * 2) }}>zoom 2 minutes</button>\r\n        <button onClick={() => { if (heatmapRef.current !== null) heatmapRef.current.setZoomLevel(60 * 3) }}>zoom 3 minutes</button>\r\n        <button onClick={() => { if (heatmapRef.current !== null) heatmapRef.current.setZoomLevel(60 * 4) }}>zoom 4 minutes</button>\r\n        <button onClick={() => { if (heatmapRef.current !== null) heatmapRef.current.setZoomLevel(60 * 5) }}>zoom 5 minutes</button>\r\n        <button onClick={() => { if (heatmapRef.current !== null) heatmapRef.current.setZoomLevel(60 * 10) }}>zoom 10 minutes</button>\r\n        <button onClick={() => { \r\n          const HHmmss = window.prompt('Enter HH:mm:ss', '00:00:00');\r\n          let split = HHmmss.split(':');\r\n          let position = (+split[0]-9)*3600 + (+split[1]*60) + (+split[2]);\r\n          if (heatmapRef.current !== null) heatmapRef.current.moveDataWindow(position);\r\n         }}>Set Position</button>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}